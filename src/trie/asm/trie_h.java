// Generated by jextract

package trie.asm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class trie_h  {

    static {
        System.loadLibrary("trie");
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ trie_h() {}
    public static MethodHandle find_rel$MH() {
        return RuntimeHelper.requireNonNull(constants$0.find_rel$MH,"find_rel");
    }
    public static int find_rel ( long array,  long key,  long from,  long pos,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.find_rel$MH, "find_rel");
        try {
            return (int)mh$.invokeExact(array, key, from, pos, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle find_abs$MH() {
        return RuntimeHelper.requireNonNull(constants$0.find_abs$MH,"find_abs");
    }
    public static int find_abs ( long array,  long key,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.find_abs$MH, "find_abs");
        try {
            return (int)mh$.invokeExact(array, key, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noop$MH() {
        return RuntimeHelper.requireNonNull(constants$0.noop$MH,"noop");
    }
    public static int noop ( long array,  long key,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.noop$MH, "noop");
        try {
            return (int)mh$.invokeExact(array, key, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


